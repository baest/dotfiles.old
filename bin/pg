#!/usr/bin/env perl

use 5.024;
use Config::IniFiles;
use File::HomeDir;
use IO::Socket::INET;
use Capture::Tiny ':all';
use Carp 'confess';
use Path::Tiny;
use JSON::MaybeXS;

my ($service, $requested_port) = @ARGV;

my $home = File::HomeDir->my_home;
my $cfg = Config::IniFiles->new( -file => "$home/.pg_service.conf", -default => "all" );
my $session_dir = path('/tmp/pg');

#TODO ctrl+c shouldn't kill connection
#TODO create child process keeping an eye on connection and HUP the parent to reconnect and kill psql session

die "Couldn't find service $service" unless $cfg->SectionExists($service);

unless ($session_dir->is_dir) {
    mkdir "$session_dir" or die "Couldn't create $session_dir: $!";
}

my $ssh_host = $cfg->val($service, 'host');
my $port = $cfg->val($service, 'port', 5432);
my $socket = $cfg->val($service, 'socket');
my $psql_host = 'localhost';
my ($local_sock, $remote_sock);

$ENV{SSH_REAL_HOST} = $ssh_host;

if ($ssh_host eq 'localhost') {
    $ENV{PGSERVICE} = $service;
    exec('psql');
}

my $local_port = $requested_port || 65432;
my $has_tunnel = 0;

if ($socket) {
	$psql_host = '/tmp';
	$local_sock = get_sock($psql_host, $local_port);
	$remote_sock = get_sock('/var/run/postgresql', $port);
}

my $session_file = $session_dir->child("$ssh_host--$port");
if ($session_file->is_file) {
    my $data = decode_json($session_file->slurp);
    my $local_port = $data->{local_port};
    my $local_sock = $data->{local_sock};

    if (check_port($local_port, $local_sock)) {
        say "Connection already established, reusing $local_port from $ssh_host";
        exec(get_psql_cmd());
    }
}

while(1) {
    my $sock = check_port($local_port, $local_sock);

    last unless $sock;
    die "Requested port $requested_port not available" if $requested_port;
    $local_port++;
	$local_sock = get_sock($psql_host, $local_port) if $local_sock;
}

say "Connecting to $local_port by forwarding from $ssh_host";

my $did_setup_proxy_jump = needed_proxy_jump($ssh_host);

my $has_connection = (!$did_setup_proxy_jump && has_ssh_connection($ssh_host));

my @args = ('ssh');
if ($has_connection) {
    push @args, '-O', 'forward'
}
else {
    push @args, '-f', '-N';
}
run_command(@args, '-L', get_ssh_forward_string(), $ssh_host);

$session_file->spew(encode_json({ host => $ssh_host, psql_host => $psql_host, port => $port, local_port => $local_port, local_sock => $local_sock, remote_sock => $remote_sock }));

if (check_port($local_port, $local_sock)) {
    $ENV{PGSERVICE} = $service;
    system(get_psql_cmd());
}

@args = ('ssh', '-O');
if ($has_connection) {
	push @args, 'cancel', '-L', get_ssh_forward_string();
}
else {
    push @args, 'exit';
}
run_command(@args, $ssh_host);
unlink $local_sock if ($local_sock && -r $local_sock);

$session_file->remove();

sub get_psql_cmd {
    $ENV{PGSERVICE} = $service;
    #system(qw!psql -h /var/run/postgresql -p!, $local_port);
    return (qw/psql -h/, $psql_host, '-p', $local_port);
}

#/tmp/pg.sock.5432:/var/run/postgresql/.s.PGSQL.5432
sub get_sock {
	my ($dir, $port) = @_;
	return "$dir/.s.PGSQL.$port";
}

sub get_ssh_forward_string {
	return ($socket ? "$local_sock:$remote_sock" : "$local_port:$psql_host:$port");
}

sub needed_proxy_jump {
    my ($ssh_host) = @_;
    my ($stdout, $stderr, $exit) = run_command('ssh', '-G', $ssh_host);

    if ($stdout =~ /proxyjump\s+(.*)/) {
        my $proxy_jump_host = $1;

        unless (has_ssh_connection($proxy_jump_host)) {
            run_lethal_command(qw/ssh -f -N/, $proxy_jump_host);
            return 1;
        }
    }
    return 0;
}

sub has_ssh_connection {
    return (!run_command(qw/ssh -O check/, @_));
}

sub check_port {
    my ($port, $sock) = @_;
	if ($sock && -r $sock) {
		return 1;
	}
    return IO::Socket::INET->new( PeerAddr => 'localhost',
                                      PeerPort => $port,
                                      Proto    => 'tcp'
    );
}

sub run_command {
    my ($cmd, @args) = @_;
    warn join(' ', $cmd, @args) if $ENV{DEBUG};

    my ($stdout, $stderr, $exit) = capture {
        system( $cmd, @args );
    };

    warn "out: $stdout\nerr: $stderr" if $ENV{DEBUG};

    return (wantarray()) ? ($stdout, $stderr, $exit) : $exit;
}

sub run_lethal_command {
    my ($cmd, @args) = @_;
    my ($stdout, $stderr, $exit) = run_command($cmd, @args);

    warn "out: $stdout\nerr: $stderr" if $exit;

    confess "Failed " . join(' ', $cmd, @args) if $exit;
    return $exit;
}

